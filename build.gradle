plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "jaci.openrio.gradle.GradleRIO" version "2018.01.06b"
    id "net.ltgt.apt" version "0.13"
}

def TEAM = 2502
def ROBOT_CLASS = "com.team2502.robot2018.Robot"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        target("roborio", jaci.openrio.gradle.frc.RoboRIO) {
            team = TEAM
        }
    }
    artifacts {
        artifact('frcJava', jaci.openrio.gradle.frc.FRCJavaArtifact) {
            targets << "roborio"
        }
    }
}

repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
    maven {
        url "https://oss.sonatype.org/content/repositories/snapshots/"
    }
}

dependencies {
    compile wpilib()
    compile ctre()
    compile navx()

    compile "com.team2502.ctannotationprocessor:CTAnnotationProcessor:1.0"
    apt     "com.team2502.ctannotationprocessor:CTAnnotationProcessor:1.0"
    compile "org.joml:joml:1.9.7"

//    compile "org.jetbrains:annotations:15.0" // Provides useful annotations like @NotNull & @Nullable

}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest jaci.openrio.gradle.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
}

task genJavadoc(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

// task deploy_paths() {
//     doLast {

// // TODO: SCP all files from ./path to lvuser:@roboRIO-2502-frc.local
//     }
// }

// task deploy(dependsOn: deploy, deploy_paths) {}

artifacts {
  archives genJavadoc
}

genJavadoc.onlyIf { project.hasProperty('runJavadoc') }
javadoc.onlyIf { project.hasProperty('runJavadoc') }

task wrapper(type: Wrapper) {
    gradleVersion = '4.4'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/']
        }
        resources {
            srcDirs = ['res/']
        }
    }
}

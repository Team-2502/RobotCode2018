plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "jaci.openrio.gradle.GradleRIO" version "2017.2.3"
}

frc {
    team = "2502"
    robotClass = "com.team2502.robot2018.Robot"     //The class for the main Robot Class. Used in manifest
    //Your FRC team number (e.g. 5333 for team 'Can't C#', or 47 for Chief Delphi)
//    rioIP = "10.25.2.37"                             //Uncomment to specify the IP address of the RIO
}

repositories {
    mavenCentral()
}

dependencies {
    compile wpilib()
    compile talonSrx()
    compile talonSrxJni()
    compile navx()

//    compile "org.jetbrains:annotations:15.0" // Provides useful annotations like @NotNull & @Nullable

}

def robotManifest = {
    attributes 'Main-Class': 'edu.wpi.first.wpilibj.RobotBase'
    attributes 'Robot-Class': frc.robotClass
}

jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest robotManifest
}

task genJavadoc(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

// task deploy_paths() {
//     doLast {

// // TODO: SCP all files from ./path to lvuser:@roboRIO-2502-frc.local
//     }
// }

// task deploy(dependsOn: deploy, deploy_paths) {}

artifacts {
  archives genJavadoc
}

genJavadoc.onlyIf { project.hasProperty('runJavadoc') }
javadoc.onlyIf { project.hasProperty('runJavadoc') }

task wrapper(type: Wrapper) {
    gradleVersion = '3.2.1'
}

sourceSets {
    main {
        java {
            srcDirs = ['src/']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

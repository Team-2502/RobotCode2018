plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "jaci.openrio.gradle.GradleRIO" version "2018.01.22"
    id "net.ltgt.apt" version "0.13"
}

def TEAM = 2502
def ROBOT_CLASS = "com.team2502.robot2018.Robot"

deploy {
    targets { target("roborio", jaci.openrio.gradle.frc.RoboRIO) { team = TEAM } }
    artifacts { artifact('frcJava', jaci.openrio.gradle.frc.FRCJavaArtifact) { targets << "roborio" } }
}

repositories {
    mavenCentral()
    flatDir { dirs 'libs' }
    maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
}

dependencies {
    compile wpilib()
    compile ctre()
    compile navx()
    compile openrio.powerup.matchData()

    compile "com.team2502.ctannotationprocessor:CTAnnotationProcessor:1.0"
    apt     "com.team2502.ctannotationprocessor:CTAnnotationProcessor:1.0"
    compile "org.joml:joml:1.9.9:beta0"
    compile group: 'com.google.guava', name: 'guava', version: '23.5-jre'
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

    testCompile 'junit:junit:4.12'
}

//def branch() {
//    def proc = "git rev-parse --abbrev-ref HEAD".execute()
//    proc.in.eachLine { line -> branch = line }
//    proc.err.eachLine { line -> println line }
//    proc.waitFor()
//}

def hash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'rev-parse', '--short', 'HEAD'
        standardOutput = stdout
    }
    return stdout.toString().trim()

}

jar {
    from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
    manifest jaci.openrio.gradle.GradleRIOPlugin.javaManifest(ROBOT_CLASS)
    manifest {
//        attributes("branch": branch())
        attributes("commit": hash())
        attributes("version": version)
        attributes("time": new Date().format("yyyy-MM-dd HH:mm:ss"))
        attributes("blame": System.getProperty("user.name"))
    }
}

task genJavadoc(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts { archives genJavadoc }

genJavadoc.onlyIf { project.hasProperty('runJavadoc') }
javadoc.onlyIf { project.hasProperty('runJavadoc') }

task wrapper(type: Wrapper) {
            gradleVersion = '4.4'
            distributionType = Wrapper.DistributionType.ALL
        }

sourceSets {
    main {
        java { srcDirs = ['src/main/java'] }
        resources { srcDirs = ['src/main/resources'] }
    }
}
